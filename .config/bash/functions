##
# Global bash functions.
#
# vim:filetype=sh:

add-alias()
{
    local name=$1 value="$2"
    echo "alias $name='$value'" >> ~/.bash/aliases
    eval "alias $name='$value'"
    alias $name
}

# Based on https://github.com/muhqu/bash-complete
#
# The MIT License
#
# Copyright (c) 2011 Mathias Leppich mleppich@muhqu.de
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

bash-complete()
{
  if [ "$#" != "1" ]; then
    local cmd="bash-complete"
    echo "Usage: $cmd <command line to complete>"
    echo
    echo "Examples:"
    echo "  $cmd \"ssh\"                   List commands starting with 'ssh'"
    echo "  $cmd \"ssh \"                  List non-option arguments completed to ssh"
    echo "  $cmd \"ssh -\"                 List option flags completed to ssh"
    echo "  $cmd \"ssh -o \"               List ssh options as completed to 'ssh -o'"
    return 1
  fi

  # Simulate user input and pipe that into an interactive bash
  local CMD="$1"
  local BNDRY="XYZXYZXYZXYZXYZXYZXYZXYZXYZ"
  # The BASH_COMPLETE_INVOKE variable is an indicator to our invoked shell that we don't want the prompt (re)set.
  local OUTPUT=$(echo -ne "false && ($CMD\t\tyyyy) && echo $BNDRY" \
    | COLUMNS=1024 PS1="$BNDRY " BASH_COMPLETE_INVOKE=true $BASH -i 2>&1)

  ## try to read the list of completions and return them as a sorted list one per line.
  local LIST
  LIST=$(echo "$OUTPUT" \
    | awk '/'$BNDRY' false/, /'$BNDRY' false.*echo '$BNDRY'/' \
    | awk '$0 !~ /'$BNDRY'/ && $0 !~ /\(y or n\)$|--More--|^> / { for (i=1; i<=NF; i++) print $i }' \
    | sort | uniq )
  if [ -n "$LIST" ]; then
    echo "$LIST"
    return 0
  fi

  # If we didn't get a list of completions then we probably completed a word, so extract the word from the command line
  local L=${#CMD}
  local CMDLW=$(echo "$CMD" | awk '{print $NF}')
  [ -n "$CMDLW" ] && L=$(($L-${#CMDLW}+1))
  echo "$OUTPUT" \
    | awk '$0 ~ /'$BNDRY' false && \(/ { split($0,a,/'$BNDRY' false && \(|yyyy\) && echo '$BNDRY'/); print a[2] }' \
    | awk '{print substr($0,'$L');}' \
    | cat

  return 0
}

# Previous versions defined reload() as an alias
unalias reload 2> /dev/null || true

reload()
{
  # Pretend bash-completion was never sourced so that all completions reload.
  unset BASH_COMPLETION_VERSINFO
  source ~/.bash/main
}
