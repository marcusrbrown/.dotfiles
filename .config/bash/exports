#!/usr/bin/env bash

# XDG directories
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

[ -d "$XDG_CONFIG_HOME" ] || mkdir -m 0750 "$XDG_CONFIG_HOME"
[ -d "$XDG_CACHE_HOME" ]  || mkdir -m 0750 "$XDG_CACHE_HOME"
[ -d "$XDG_DATA_HOME" ]   || mkdir -m 0750 "$XDG_DATA_HOME"
[ -d "$XDG_STATE_HOME" ]  || mkdir -m 0750 "$XDG_STATE_HOME"

# Path utilities

# Remove path from PATH
remove_from_path() {
  new_path="$(echo "$PATH" | sed -e "s@:$1@@g" -e "s@$1:@@g" -e "s@$1@@g")"
  PATH="$new_path"
}

# Add path to the start of PATH
prepend_to_path() {
  [ -d "$1" ] || return
  remove_from_path "$1"
  PATH="$1:${PATH}"
}

# Add path to the end of PATH
append_to_path() {
  [ -d "$1" ] || return
  remove_from_path "$1"
  PATH="${PATH}:$1"
}

# Check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# detect remote shell
if [ -n "$SSH_CONNECTION" ]; then
  export REMOTE=1
else
  unset REMOTE
fi

# Kernel and system identification.
# Don't set any variables named OS, OS_TYPE, or HOSTTYPE, these may already exist.
# Strip any numbers trailing the kernel, i.e. remove "32..." from "mingw32..."
HOST_OS=$(uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/;s/[0-9].*//')
HOST_MACHINE=$(uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/')
HOST_VERSION=$(expr "$(uname -r)" : '[^0-9]*\([0-9]*\.[0-9]*\)')
export HOST_PLATFORM="${HOST_MACHINE}-${HOST_OS}-${HOST_VERSION}"

if [[ "$HOST_OS" == "darwin" ]]; then
  PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"
  [ ! -d "$PREFIX" ] && PREFIX="/usr/local"
  export PREFIX

  # Add Homebrew bin directories to PATH in front of system directories.
  prepend_to_path "$PREFIX/sbin"
  prepend_to_path "$PREFIX/bin"

  if command_exists brew; then
    export HOMEBREW_AUTOREMOVE=1
    export HOMEBREW_BOOTSNAP=1
    export HOMEBREW_CLEANUP_MAX_AGE_DAYS=30
    export HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS=1
    # Enable Homebrew developer mode
    export HOMEBREW_DEVELOPER=1
    # Disable 'anonymous' analytics
    export HOMEBREW_NO_ANALYTICS=1
    # Remove previously installed versions of insalled/upgraded formulae
    export HOMEBREW_INSTALL_CLEANUP=1
    # Do not permit redirects from HTTPS to HTTP
    export HOMEBREW_NO_INSECURE_REDIRECT=1
    # Do not show environment variable hints
    export HOMEBREW_NO_ENV_HINTS=1
    export HOMEBREW_SORBET_RUNTIME=1

    eval "$(brew shellenv)"
  fi
fi

# Local tools and utilities
prepend_to_path "$HOME/.local/bin"

# History

HISTSIZE=100000
if [ "$BASH" ]; then
  export HISTFILE="$XDG_CACHE_HOME/bash_history"
  export HISTFILESIZE=1000000000
  export HISTCONTROL=ignoreboth
  export HISTIGNORE="&:cd:ls:ll:la:lal:l:[bf]g:exit:clear:pwd"
  export HISTTIMEFORMAT='[%F %T] '
elif [ "$ZSH_VERSION" ]; then
  export HISTFILE="$XDG_CACHE_HOME/zsh_history"
  export SAVEHIST=$HISTSIZE
  # Comes from OMZ/lib/history.zsh
  export HIST_STAMPS="%F %T "
fi

# https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html
export INPUTRC="$XDG_CONFIG_HOME/bash/inputrc"

# Go

if command_exists go; then
  export GOPATH="$XDG_DATA_HOME/go"
  export GOROOT
  if command_exists go; then
    : "${GOROOT:=$(go env GOROOT)}"
  elif command_exists brew && [[ -d "$(brew --prefix golang)/libexec" ]]; then
    : "${GOROOT:=$(brew --prefix golang)/libexec}"
  elif [[ -d /usr/local/go ]]; then
    : "${GOROOT:=/usr/local/go}"
  fi
  test -d "$GOPATH" || mkdir -p "$GOPATH"
  test -d "$GOPATH/src/github.com" || mkdir -p "$GOPATH/src/github.com"
  append_to_path "$GOPATH/bin"
  append_to_path "$GOROOT/bin"
fi

# Python

if command_exists pipx; then
  export PIPX_BIN_DIR="$XDG_DATA_HOME/pipx/bin"
  export PIPX_HOME="$XDG_DATA_HOME/pipx"
  prepend_to_path "$PIPX_BIN_DIR"
fi

export PYLINTHOME="$XDG_CACHE_HOME/pylint"
export PYTHONHISTORY="$XDG_CACHE_HOME/python_history"

# Rust

if command_exists cargo; then
  export CARGO_HOME="$XDG_DATA_HOME/cargo"
  export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
  prepend_to_path "$CARGO_HOME/bin"
fi

# cURL

if command_exists brew && [[ -d "$(brew --prefix curl)/bin" ]]; then
  prepend_to_path "$(brew --prefix curl)/bin"
fi

# Ruby

if command_exists brew && [[ -d "$(brew --prefix ruby)/bin" ]]; then
  prepend_to_path "$(brew --prefix ruby)/bin"
fi

# Add the path to `mise` shims
if [ -d "$HOME/.local/share/mise/shims" ]; then
  prepend_to_path "$HOME/.local/share/mise/shims"
fi

# Pagers

if command_exists bat; then
  export MANPAGER="sh -c 'col -bx | bat -l man --style=grid --pager \"less -R -M -i +Gg\"'"
  export MANROFFOPT='-c'
fi

# Long options: --quit-if-one-screen --LONG-PROMPT --RAW-CONTROL-CHARS --chop-long-lines --ignore-case
export LESS="-F -M -R -S -i"

unset PREFIX

export PATH

# vim: set ft=sh ts=2 sw=2 tw=80 et :
