#!/usr/bin/env bash

# Locale

: "${LANG:=en_US.UTF-8}"
: "${LANGUAGE:=en}"
LC_CTYPE="$LANG"
LC_ALL="$LANG"
export LANG LANGUAGE LC_CTYPE LC_ALL

# XDG directories
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

[ -d "$XDG_CONFIG_HOME" ] || mkdir -m 0750 "$XDG_CONFIG_HOME"
[ -d "$XDG_CACHE_HOME" ]  || mkdir -m 0750 "$XDG_CACHE_HOME"
[ -d "$XDG_DATA_HOME" ]   || mkdir -m 0750 "$XDG_DATA_HOME"
[ -d "$XDG_STATE_HOME" ]  || mkdir -m 0750 "$XDG_STATE_HOME"

# Path utilities

# Remove path from PATH
remove_from_path() {
  new_path="$(echo "$PATH" | sed -e "s@:$1@@g" -e "s@$1:@@g" -e "s@$1@@g")"
  PATH="$new_path"
}

# Add path to the start of PATH
prepend_to_path() {
  [ -d "$1" ] || return
  remove_from_path "$1"
  PATH="$1:${PATH}"
}

# Add path to the end of PATH
append_to_path() {
  [ -d "$1" ] || return
  remove_from_path "$1"
  PATH="${PATH}:$1"
}

# Check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# detect remote shell
if [ -n "$SSH_CONNECTION" ]; then
  export REMOTE=1
else
  unset REMOTE
fi

# Kernel and system identification.
# Don't set any variables named OS, OS_TYPE, or HOSTTYPE, these may already exist.
# Strip any numbers trailing the kernel, i.e. remove "32..." from "mingw32..."
HOST_OS=$(uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/;s/[0-9].*//')
HOST_MACHINE=$(uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/')
HOST_VERSION=$(expr "$(uname -r)" : '[^0-9]*\([0-9]*\.[0-9]*\)')
export HOST_PLATFORM="${HOST_MACHINE}-${HOST_OS}-${HOST_VERSION}"

if [[ "$HOST_OS" == "darwin" ]]; then
  PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"
  [ ! -d "$PREFIX" ] && PREFIX="/usr/local"
  export PREFIX

  # Add Homebrew bin directories to PATH in front of system directories.
  prepend_to_path "$PREFIX/sbin"
  prepend_to_path "$PREFIX/bin"
fi

if command_exists brew; then
  export HOMEBREW_AUTOREMOVE=1
  export HOMEBREW_CLEANUP_MAX_AGE_DAYS=30
  export HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS=1
  # Enable Homebrew developer mode
  export HOMEBREW_DEVELOPER=1
  # Disable 'anonymous' analytics
  export HOMEBREW_NO_ANALYTICS=1
  # Remove previously installed versions of insalled/upgraded formulae
  export HOMEBREW_INSTALL_CLEANUP=1
  # Do not permit redirects from HTTPS to HTTP
  export HOMEBREW_NO_INSECURE_REDIRECT=1
  # Do not show environment variable hints
  export HOMEBREW_NO_ENV_HINTS=1

  eval "$(brew shellenv)"
fi

# Local tools and utilities
prepend_to_path "$HOME/.local/bin"

# History

HISTSIZE=100000
if [ "$BASH" ]; then
  export HISTFILE="$XDG_CACHE_HOME/bash_history"
  export HISTFILESIZE=1000000000
  export HISTCONTROL=ignoreboth
  export HISTIGNORE="&:cd:ls:ll:la:lal:l:[bf]g:exit:clear:pwd"
  export HISTTIMEFORMAT='[%F %T] '
elif [ "$ZSH_VERSION" ]; then
  export HISTFILE="$XDG_CACHE_HOME/zsh_history"
  export SAVEHIST=$HISTSIZE
  # Comes from OMZ/lib/history.zsh
  export HIST_STAMPS="%F %T "
fi

# Zsh
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

# https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html
export INPUTRC="$XDG_CONFIG_HOME/readline/inputrc"

# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration.html
export GNUPGHOME="$XDG_CONFIG_HOME/gnupg"

# Set up gpg-agent to work with ssh
# shellcheck disable=SC2155
export GPG_TTY=$(tty)
if command_exists gpgconf && [[ $(gpgconf --list-options gpg-agent 2>/dev/null | awk -F: '$1=="enable-ssh-support" {print $10}') = 1 ]]; then
  unset SSH_AGENT_PID
  if [[ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]]; then
    # shellcheck disable=SC2155
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  fi
fi

# Go

if command_exists go; then
  export GOPATH="$XDG_DATA_HOME"/go
  if command_exists go; then
    : "${GOROOT:=$(go env GOROOT)}"
  elif command_exists brew && [[ -d "$(brew --prefix golang)/libexec" ]]; then
    : "${GOROOT:=$(brew --prefix golang)/libexec}"
  elif [[ -d /usr/local/go ]]; then
    : "${GOROOT:=/usr/local/go}"
  fi
  export GOROOT
  test -d "$GOPATH" || mkdir -p "$GOPATH"
  test -d "$GOPATH/src/github.com" || mkdir -p "$GOPATH/src/github.com"
  append_to_path "$GOPATH/bin"
  append_to_path "$GOROOT/bin"
fi

# npm

if command_exists node; then
  if [[ "$HOST_OS" == "darwin" ]]; then
    export NODE_EXTRA_CA_CERTS="$PREFIX/etc/ca-certificates/cert.pem"
  fi
  export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history
fi

if command_exists npm; then
  export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
fi

export NVM_DIR="$XDG_DATA_HOME/nvm"

# Python

export IPYTHONDIR="$XDG_CONFIG_HOME/ipython"

if command_exists pipx; then
  export PIPX_BIN_DIR="$XDG_DATA_HOME/pipx/bin"
  export PIPX_HOME="$XDG_DATA_HOME/pipx"
  prepend_to_path "$PIPX_BIN_DIR"
fi

export POETRY_CACHE_DIR="$XDG_CACHE_HOME/poetry"
export POETRY_CONFIG_DIR="$XDG_CONFIG_HOME/poetry"
export POETRY_DATA_DIR="$XDG_DATA_HOME/poetry"
export POETRY_VIRTUALENVS_PATH="$XDG_DATA_HOME/python/poetry"

if [ -z "$VIRTUAL_ENV" ] && command_exists pyenv; then
  export PYENV_ROOT="$XDG_DATA_HOME/pyenv"
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
  eval "$(pyenv init --no-push-path -)"
fi

export PYLINTHOME="$XDG_CACHE_HOME/pylint"
export PYTHONHISTORY="$XDG_CACHE_HOME/python_history"

export WORKON_HOME="$XDG_DATA_HOME/virtualenvs"

# Rust

if command_exists cargo; then
  export CARGO_HOME="$XDG_DATA_HOME/cargo"
  export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
  prepend_to_path "$CARGO_HOME/bin"
fi

# cURL

if command_exists brew && [[ -d "$(brew --prefix curl)/bin" ]]; then
  prepend_to_path "$(brew --prefix curl)/bin"
fi

# Ruby

if command_exists brew && [[ -d "$(brew --prefix ruby)/bin" ]]; then
  prepend_to_path "$(brew --prefix ruby)/bin"
fi

if command_exists gem; then
  export GEMRC="$XDG_CONFIG_HOME"/gem/config
  # shellcheck disable=SC2155
  export GEM_HOME="$XDG_DATA_HOME"/gem
  export GEM_SPEC_CACHE="$XDG_CACHE_HOME"/gem
  append_to_path "$GEM_HOME/bin"
fi

# Platformio

export PLATFORMIO_CACHE_DIR="$XDG_CACHE_HOME"/platformio
export PLATFORMIO_CORE_DIR="$XDG_DATA_HOME"/platformio

export PLATFORMIO_SETTING_ENABLE_TELEMETRY=No

# Android

if [ -d "$HOME/Library/Android/sdk" ]; then
  export ANDROID_SDK_HOME="$XDG_DATA_HOME"/android
  export ANDROID_HOME="$HOME"/Library/Android/sdk
  append_to_path "$ANDROID_HOME/tools"
  append_to_path "$ANDROID_HOME/platform-tools"
fi

# Add the path to `mise` shims
if [ -d "$HOME/.local/share/mise/shims" ]; then
  prepend_to_path "$HOME/.local/share/mise/shims"
fi

# Pagers

if command_exists bat; then
  export MANPAGER="sh -c 'col -bx | bat -l man --style=grid --pager \"less -R -M -i +Gg\"'"
  export MANROFFOPT='-c'
fi

# Long options: --quit-if-one-screen --LONG-PROMPT --RAW-CONTROL-CHARS --chop-long-lines --ignore-case
export LESS="-F -M -R -S -i"
export LESSHISTFILE="$XDG_CACHE_HOME/less_history"
export LESSKEY="$XDG_CONFIG_HOME/lesskey/output"

# SQLite
export SQLITE_HISTORY="$XDG_CACHE_HOME/sqlite_history"

unset PREFIX

export PATH

# vim: set ft=sh ts=2 sw=2 tw=80 et :
