##
# Bash configuration for mingw.
#
# vim:filetype=sh:

# Convert the given argument to a windows path. Under mingw, this is accomplished by relying
# on mingw's path conversion when executing Windows programs. We simply echo the path value
# using cmd.exe and replace forward slashes with backslashes.
winpath()
{
  cmd //c echo "$@" | sed 's/\//\\/g'
}


# Force the terminal type to "xterm" if using mingw vim, which is built
# without the terminfo support needed for "xterm-256color".
__garbage __vim
__vim=$(type -P vim)
if [ -x "$__vim" ]; then
  __garbage __vim_terminfo
  __vim_terminfo=`"$__vim" --version | grep +terminfo`
  if [ -z "$__vim_terminfo" ]; then
    export TERM=xterm
  fi
fi


# Find the git executable. If git.exe is already on the PATH, there's no need to do anything.
# If git.cmd is found, create an alias to it - msys doesn't automatically invoke cmd.exe for
# .cmd files.
#unalias git
__garbage __git
__git=$(type -P git.exe git.cmd | head -1)
if [ "${__git#*.}" == "cmd" ]; then
  alias git="cmd //c "$(basename "${__git}")""
fi


# Always launch gvim in the background. This is used to avoid typing/forgetting the & at the
# end of the gvim command.
gvim()
{
  local gvim=$(type -P gvim | head -1)
  if [ -n "$gvim" ]; then
    cmd //c start \"-\" "$gvim" "$@"
  fi
}
