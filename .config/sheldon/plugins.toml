# sheldon: zsh
# See the documentation for more https://github.com/rossmacarthur/sheldon#readme

shell = "zsh"

[templates]
autoload = "{{ hooks?.pre | nl }}autoload -Uz \"{{ dir }}/{{ name }}\"\n{{ hooks?.post | nl }}"
defer = "{{ hooks?.pre | nl }}{% for file in files %}zsh-defer source \"{{ file }}\"\n{% endfor %}{{ hooks?.post | nl }}"

[plugins.zsh-settings]
inline = '''
setopt append_history         # apppend to the history file across all shells
setopt inc_append_history     # write to the history file immediately, not when the shell exits
'''

[plugins.key-bindings]
inline = '''
# Key bindings
export KEYTIMEOUT=1

stty intr '^C'                 # Ctrl-C
stty susp '^Z'                 # Ctrl-Z
stty stop undef                # Ctrl-S

# Use emacs key bindings even if our EDITOR is set to vi
bindkey -e

bindkey -s '^[[32;2u' ' '

# [Home] - Move to the beginning of the line
bindkey '^[[H'    beginning-of-line
bindkey '^[[1~'   beginning-of-line
bindkey '^[[7~'   beginning-of-line

# [End] - Move to the end of the line
bindkey '^[[F'    end-of-line
bindkey '^[[4~'   end-of-line
bindkey '^[[8~'   end-of-line

# [Ctrl-Left] - Move one word backward
bindkey '^[[1;5D' backward-word
bindkey '^[[1;9D' backward-word

# [Ctrl-Right] - Move one word forward
bindkey '^[[1;5C' forward-word
bindkey '^[[1;9C' forward-word

# [Backspace] - Delete the character before the cursor
bindkey '^?'      backward-delete-char
bindkey '^H'      backward-delete-char

# [Delete] - Delete the character under the cursor
bindkey '^[[3~'   delete-char

# [Ctrl-Delete] - Delete the word under the cursor
bindkey '^[[3;5~' kill-word

# [Shift-Tab] - Move to the previous completion
zmodload zsh/complist
bindkey '^[[Z'    reverse-menu-complete
bindkey -M menuselect '^[[Z' reverse-menu-complete

# Edit the command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^x^e'    edit-command-line
bindkey '^xe'     edit-command-line

# From @OMZL::key-bindings
bindkey '\ew' kill-region                           # [Esc-w] - Kill from the cursor to the mark
bindkey '^r' history-incremental-search-backwards   # [Ctrl-r] - search history backwards
bindkey ' ' magic-space                             # [Space] - do history expansion
'''

[plugins.aliases]
local = "~/.config/bash"
use = ["aliases"]

[plugins.gpg]
inline = '''
# Ensure the passphrase prompt is shown in the correct tty
function _gpg-agent_update-tty_preexec {
  gpg-connect-agent updatestartuptty /bye &>/dev/null
}
autoload -U add-zsh-hook
add-zsh-hook preexec _gpg-agent_update-tty_preexec
'''

[plugins.ssh]
github = "zpm-zsh/ssh"

[plugins.zsh-completions]
github = "zsh-users/zsh-completions"

[plugins.zsh-utils]
github = "belak/zsh-utils"
use = ["{editor,completion}/*.plugin.zsh"]

[plugins.zsh-better-npm-completion]
github = "lukechilds/zsh-better-npm-completion"

[plugins.zsh-nvm]
github = "lukechilds/zsh-nvm"
[plugins.zsh-nvm.hooks]
pre = '''
NVM_AUTO_USE=true
NVM_COMPLETION=true
'''

[plugins.zsh-defer]
github = "romkatv/zsh-defer"
apply = ["autoload"]

[plugins.zsh-history-substring-search]
github = "zsh-users/zsh-history-substring-search"
use = ["{{ name }}.zsh"]
apply = ["defer"]
[plugins.zsh-history-substring-search.hooks]
post = '''
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
'''

[plugins.zsh-autosuggestions]
github = "zsh-users/zsh-autosuggestions"
use = ["{{ name }}.zsh"]
apply = ["defer"]
[plugins.zsh-autosuggestions.hooks]
pre = '''
typeset -ga ZSH_AUTOSUGGEST_STRATEGY
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_USE_ASYNC=1
'''

[plugins.fast-syntax-highlighting]
github = "zdharma-continuum/fast-syntax-highlighting"
apply = ["defer"]
[plugins.fast-syntax-highlighting.hooks]
pre = '''
export FAST_WORK_DIR="$XDG_CONFIG_HOME/fsh"
[[ ! -d "${FAST_WORK_DIR}" ]] && mkdir -p "${FAST_WORK_DIR}"
'''

[plugins.history-search-multi-word]
github = "zdharma/history-search-multi-word"

[plugins.mise]
inline = 'command_exists mise && eval "$(mise activate zsh)"'

# starship ðŸš€
[plugins.starship]
inline = 'command_exists starship && eval "$(starship init zsh)"'

# Secure Shellfish
[plugins.shellfish]
inline = 'source "$HOME/.shellfishrc" 2>/dev/null || true'
